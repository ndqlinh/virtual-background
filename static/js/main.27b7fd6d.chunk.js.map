{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","vidRef","useRef","canvasRef","imageRef","selectedEffect","canvasCtx","useState","stream","setStream","useEffect","attachWebcam","current","getContext","console","log","onLoadMediapipe","srcObject","navigator","mediaDevices","getUserMedia","video","then","catch","error","effect","selfieSegmentation","SelfieSegmentation","locateFile","file","setOptions","selfieMode","modelSelection","onResults","camera","Camera","onFrame","a","send","image","width","height","start","results","save","clearRect","globalCompositeOperation","filter","brightnessMax","drawImage","segmentationMask","onChangeVirtualBg","restore","isBlur","className","ref","id","autoPlay","playsInline","src","alt","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27b7fd6d.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nimport { SelfieSegmentation } from '@mediapipe/selfie_segmentation';\nimport { Camera } from '@mediapipe/camera_utils';\n\nimport './App.css';\n\nconst App = () => {\n  const vidRef: any = useRef(null);\n  const canvasRef: any = useRef(null);\n  const imageRef: any = useRef(null);\n  const selectedEffect: any = useRef(null);\n  let canvasCtx: any = useRef(null);\n\n  const [stream, setStream] = useState<any>(null);\n  // const [ selectedEffect, setSelectedEffect ] = useState<any>(null);\n\n  const blurIntensityMax = 100;\n  const defaultBlurIntensity = 25;\n  const blurIntensity = 10;\n  const brightnessMax = blurIntensityMax + defaultBlurIntensity;\n\n  useEffect(() => {\n    attachWebcam();\n  }, []);\n\n  useEffect(() => {\n    if (canvasRef?.current) {\n      canvasCtx.current = canvasRef?.current?.getContext('2d');\n      console.log(123, 'onLoadMediapipe');\n      onLoadMediapipe();\n    }\n  }, [canvasRef]);\n\n  useEffect(() => {\n    if (stream) {\n      vidRef.current.srcObject = stream;\n      canvasCtx.current = canvasRef?.current?.getContext('2d');\n    }\n  }, [stream]);\n\n  useEffect(() => {\n    onLoadMediapipe();\n  }, [selectedEffect])\n\n  const attachWebcam = () => {\n    if (navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({ video: true })\n        .then(stream => {\n          setStream(stream);\n        })\n        .catch(error => {\n          vidRef.current.srcObject = null;\n        });\n    }\n  };\n\n  const onLoadMediapipe = (effect?: any) => {\n    selectedEffect.current = effect;\n    const selfieSegmentation = new SelfieSegmentation({locateFile: (file) => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;\n    }});\n    selfieSegmentation.setOptions({\n      selfieMode: true,\n      modelSelection: 1,\n    });\n    selfieSegmentation.onResults(onResults);\n    const camera = new Camera(vidRef?.current, {\n      onFrame: async () => {\n        await selfieSegmentation.send({image: vidRef?.current});\n      },\n      width: 480,\n      height: 320\n    });\n    camera.start();\n  }\n\n  const onResults = (results: any) => {\n    canvasCtx.current.save();\n    canvasCtx.current.clearRect(0, 0, canvasRef?.current?.width, canvasRef?.current?.height);\n\n    canvasCtx.current.globalCompositeOperation = 'copy';\n    canvasCtx.current.filter = 'none';\n    canvasCtx.current.filter = `blur(${blurIntensity}px) brightness(${brightnessMax - blurIntensity}%)`;\n    canvasCtx.current.drawImage(\n      results.segmentationMask,\n      0,\n      0,\n      canvasRef?.current?.width,\n      canvasRef?.current?.height\n    );\n\n    canvasCtx.current.globalCompositeOperation = 'source-in';\n    canvasCtx.current.filter = 'none';\n    canvasCtx.current.drawImage(\n      results.image,\n      0,\n      0,\n      canvasRef?.current?.width,\n      canvasRef?.current?.height\n    );\n\n    switch (selectedEffect.current) {\n      case 'blur':\n        onChangeVirtualBg(true, results.image);\n        break;\n      case 'virtual':\n        onChangeVirtualBg(false, imageRef?.current);\n        break;\n      default:\n        onChangeVirtualBg(false, results.image);\n    }\n\n    canvasCtx.current.restore();\n  };\n\n  const onChangeVirtualBg = (isBlur?: boolean, image?: HTMLImageElement) => {\n    canvasCtx.current.globalCompositeOperation = 'destination-over';\n    canvasCtx.current.filter = isBlur ? `blur(${blurIntensity}px) brightness(${brightnessMax - blurIntensity}%)` : 'none';\n    canvasCtx.current.drawImage(\n      image,\n      0,\n      0,\n      canvasRef?.current?.width,\n      canvasRef?.current?.height\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"video-container\">\n        <canvas\n          className=\"output-canvas\"\n          ref={ canvasRef }\n          width=\"480px\"\n          height=\"320px\"\n        ></canvas>\n        <video\n          id=\"video\"\n          className=\"video\"\n          ref={ vidRef }\n          width=\"480\"\n          height=\"320\"\n          autoPlay\n          playsInline\n        ></video>\n      </div>\n      <img ref={ imageRef } src=\"https://images.mrandmrssmith.com/images/1482x988/4861210-intercontinental-danang-sun-peninsula-resort-hotel-sontra-peninsula-da-nang-vietnam.jpg\" alt=\"bg\" />\n      <div className=\"btn-group\">\n        <button className=\"btn\"onClick={ () => onLoadMediapipe('blur') }>Blur</button>\n        <button className=\"btn\"onClick={ () => onLoadMediapipe('virtual') }>Image</button>\n        <button className=\"btn\"onClick={ () => onLoadMediapipe(null)  }>Clear</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}