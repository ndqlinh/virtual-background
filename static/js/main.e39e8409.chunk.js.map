{"version":3,"sources":["assets/bg.jpeg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","vidRef","useRef","canvasRef","resultRef","imageRef","selectedEffect","canvasCtx","useEffect","attachWebcam","current","getContext","onLoadMediapipe","navigator","mediaDevices","getUserMedia","video","then","stream","srcObject","catch","error","effect","selfieSegmentation","SelfieSegmentation","locateFile","file","setOptions","selfieMode","modelSelection","onResults","camera","Camera","onFrame","a","send","image","width","height","start","generateStream","results","clearCanvas","filter","drawSegmentationMask","segmentationMask","globalCompositeOperation","drawImage","onChangeVirtualBg","restore","isBlur","blurAmount","segmentation","clearRect","captureStream","className","id","ref","autoPlay","playsInline","src","background","alt","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e39e8409.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.e5883fda.jpeg\";","import React, { useEffect, useRef, useState } from 'react';\n\nimport { SelfieSegmentation } from '@mediapipe/selfie_segmentation';\nimport { Camera } from '@mediapipe/camera_utils';\n\nimport background from './assets/bg.jpeg';\nimport './App.css';\n\nconst App = () => {\n  const vidRef: any = useRef(null);\n  const canvasRef: any = useRef(null);\n  const resultRef: any = useRef(null);\n  const imageRef: any = useRef(null);\n  const selectedEffect: any = useRef(null);\n  let canvasCtx: any = useRef(null);\n\n  const blurIntensityMax = 100;\n  const defaultBlurIntensity = 25;\n  const blurIntensity = 10;\n  const brightnessMax = blurIntensityMax + defaultBlurIntensity;\n\n  useEffect(() => {\n    attachWebcam();\n  }, []);\n\n  useEffect(() => {\n    if (canvasRef?.current) {\n      canvasCtx.current = canvasRef?.current?.getContext('2d');\n      onLoadMediapipe();\n    }\n  }, [canvasRef]);\n\n  useEffect(() => {\n    onLoadMediapipe(selectedEffect);\n  }, [selectedEffect])\n\n  const attachWebcam = () => {\n    if (navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({ video: true })\n        .then(stream => {\n          vidRef.current.srcObject = stream;\n        })\n        .catch(error => {\n          vidRef.current.srcObject = null;\n        });\n    }\n  };\n\n  const onLoadMediapipe = (effect?: any) => {\n    selectedEffect.current = effect;\n    const selfieSegmentation = new SelfieSegmentation({locateFile: (file) => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;\n    }});\n    selfieSegmentation.setOptions({\n      selfieMode: true,\n      modelSelection: 1,\n    });\n    selfieSegmentation.onResults(onResults);\n    const camera = new Camera(vidRef?.current, {\n      onFrame: async () => {\n        await selfieSegmentation.send({image: vidRef?.current});\n      },\n      width: 480,\n      height: 320\n    });\n    camera.start();\n    generateStream();\n  };\n\n  const onResults = (results: any) => {\n    clearCanvas();\n\n    if (selectedEffect.current) {\n      canvasCtx.current.filter = `blur(${blurIntensity}px)`;\n      drawSegmentationMask(results.segmentationMask);\n      canvasCtx.current.globalCompositeOperation = \"source-in\";\n      canvasCtx.current.filter = \"none\";\n    }\n\n    canvasCtx.current.drawImage(results.image, 0, 0, canvasRef?.current?.width, canvasRef?.current?.height);\n\n    switch (selectedEffect.current) {\n      case 'blur':\n        onChangeVirtualBg(true, results.image);\n        break;\n      case 'virtual':\n        onChangeVirtualBg(false, imageRef?.current);\n        break;\n      default:\n        onChangeVirtualBg(false, results.image);\n    }\n\n    canvasCtx.current.restore();\n  };\n\n  const onChangeVirtualBg = (isBlur?: boolean, image?: HTMLImageElement) => {\n    const blurAmount = isBlur ? blurIntensity : 0;\n    canvasCtx.current.globalCompositeOperation = 'destination-over';\n    canvasCtx.current.filter = `blur(${blurAmount}px)`;\n    canvasCtx.current.drawImage(\n      image,\n      0,\n      0,\n      canvasRef?.current?.width,\n      canvasRef?.current?.height\n    );\n  };\n\n  const drawSegmentationMask = (segmentation: any) => {\n    canvasCtx?.current?.drawImage(segmentation, 0, 0, canvasRef?.current?.width, canvasRef?.current?.height);\n  };\n\n  const clearCanvas = () => {\n    canvasCtx?.current?.clearRect(0, 0, canvasRef?.current?.width, canvasRef?.current?.height);\n  };\n\n  const generateStream = () => {\n    const stream = canvasRef?.current?.captureStream();\n    resultRef.current.srcObject = stream;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"video-container\">\n        <video\n          id=\"video-result\"\n          className=\"video-result\"\n          ref={ resultRef }\n          width=\"480\"\n          height=\"320\"\n          autoPlay\n          playsInline\n        ></video>\n        <canvas\n          className=\"output-canvas\"\n          ref={ canvasRef }\n          width=\"480px\"\n          height=\"320px\"\n        ></canvas>\n        <video\n          id=\"video\"\n          className=\"video\"\n          ref={ vidRef }\n          width=\"480\"\n          height=\"320\"\n          autoPlay\n          playsInline\n        ></video>\n      </div>\n      <img ref={ imageRef } src={ background } alt=\"bg\" />\n      <div className=\"btn-group\">\n        <button className=\"btn\"onClick={ () => onLoadMediapipe('blur') }>Blur</button>\n        <button className=\"btn\"onClick={ () => onLoadMediapipe('virtual') }>Image</button>\n        <button className=\"btn\"onClick={ () => onLoadMediapipe(null)  }>Clear</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}