{"version":3,"sources":["assets/alo.jpg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","vidRef","useRef","canvasRef","resultRef","imageRef","selectedEffect","canvasCtx","useState","stream","setStream","useEffect","attachWebcam","current","getContext","onLoadMediapipe","srcObject","navigator","mediaDevices","getUserMedia","video","then","catch","error","effect","hidden","selfieSegmentation","SelfieSegmentation","locateFile","file","setOptions","selfieMode","modelSelection","onResults","camera","Camera","onFrame","a","send","image","width","height","start","generateStream","results","clearCanvas","filter","brightnessMax","drawSegmentationMask","segmentationMask","globalCompositeOperation","drawImage","onChangeVirtualBg","restore","isBlur","blurAmount","blurIntensityMax","segmentation","clearRect","captureStream","className","ref","id","autoPlay","playsInline","src","background","alt","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22e70596.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/alo.20246286.jpg\";","import React, { useEffect, useRef, useState } from 'react';\n\nimport { SelfieSegmentation } from '@mediapipe/selfie_segmentation';\nimport { Camera } from '@mediapipe/camera_utils';\n\nimport background from './assets/alo.jpg';\nimport './App.css';\n\nconst App = () => {\n  const vidRef: any = useRef(null);\n  const canvasRef: any = useRef(null);\n  const resultRef: any = useRef(null);\n  const imageRef: any = useRef(null);\n  const selectedEffect: any = useRef(null);\n  let canvasCtx: any = useRef(null);\n\n  const [stream, setStream] = useState<any>(null);\n  // const [ selectedEffect, setSelectedEffect ] = useState<any>(null);\n\n  const blurIntensityMax = 100;\n  const defaultBlurIntensity = 25;\n  const blurIntensity = 10;\n  const brightnessMax = blurIntensityMax + defaultBlurIntensity;\n\n  useEffect(() => {\n    attachWebcam();\n  }, []);\n\n  useEffect(() => {\n    if (canvasRef?.current) {\n      canvasCtx.current = canvasRef?.current?.getContext('2d');\n      onLoadMediapipe();\n    }\n  }, [canvasRef]);\n\n  useEffect(() => {\n    if (stream) {\n      vidRef.current.srcObject = stream;\n      canvasCtx.current = canvasRef?.current?.getContext('2d');\n    }\n  }, [stream]);\n\n  useEffect(() => {\n    onLoadMediapipe(selectedEffect);\n  }, [selectedEffect])\n\n  const attachWebcam = () => {\n    if (navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({ video: true })\n        .then(stream => {\n          setStream(stream);\n        })\n        .catch(error => {\n          vidRef.current.srcObject = null;\n        });\n    }\n  };\n\n  const onLoadMediapipe = (effect?: any) => {\n    resultRef.current.hidden = true;\n    selectedEffect.current = effect;\n    const selfieSegmentation = new SelfieSegmentation({locateFile: (file) => {\n      return `https://cdn.jsdelivr.net/npm/@mediapipe/selfie_segmentation/${file}`;\n    }});\n    selfieSegmentation.setOptions({\n      selfieMode: true,\n      modelSelection: 1,\n    });\n    selfieSegmentation.onResults(onResults);\n    const camera = new Camera(vidRef?.current, {\n      onFrame: async () => {\n        await selfieSegmentation.send({image: vidRef?.current});\n      },\n      width: 480,\n      height: 320\n    });\n    camera.start();\n    generateStream();\n  }\n\n  const onResults = (results: any) => {\n    clearCanvas();\n\n    if (selectedEffect.current) {\n      canvasCtx.current.filter = `blur(${blurIntensity}px) brightness(${brightnessMax - blurIntensity}%)`;\n      drawSegmentationMask(results.segmentationMask);\n      canvasCtx.current.globalCompositeOperation = \"source-in\";\n      canvasCtx.current.filter = \"none\";\n    }\n\n    canvasCtx.current.drawImage(results.image, 0, 0, canvasRef?.current?.width, canvasRef?.current?.height);\n\n    switch (selectedEffect.current) {\n      case 'blur':\n        onChangeVirtualBg(true, results.image);\n        break;\n      case 'virtual':\n        onChangeVirtualBg(false, imageRef?.current);\n        break;\n      default:\n        onChangeVirtualBg(false, results.image);\n    }\n\n    canvasCtx.current.restore();\n  };\n\n  const onChangeVirtualBg = (isBlur?: boolean, image?: HTMLImageElement) => {\n    const blurAmount = isBlur ? blurIntensity : 0;\n    canvasCtx.current.globalCompositeOperation = 'destination-over';\n    canvasCtx.current.filter = `blur(${blurAmount}px) brightness(${brightnessMax - blurAmount}%)`;\n    canvasCtx.current.drawImage(\n      image,\n      0,\n      0,\n      canvasRef?.current?.width,\n      canvasRef?.current?.height\n    );\n  };\n\n  const drawSegmentationMask = (segmentation: any) => {\n    canvasCtx?.current?.drawImage(segmentation, 0, 0, canvasRef?.current?.width, canvasRef?.current?.height);\n  };\n\n  const clearCanvas = () => {\n    canvasCtx?.current?.clearRect(0, 0, canvasRef?.current?.width, canvasRef?.current?.height);\n  };\n\n  const generateStream = () => {\n    const stream = canvasRef?.current?.captureStream();\n    resultRef.current.srcObject = stream;\n    if (resultRef?.current?.hidden) {\n      resultRef.current.hidden = false;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h3>Canvas:</h3>\n      <div className=\"video-container\">\n        <canvas\n          className=\"output-canvas\"\n          ref={ canvasRef }\n          width=\"480px\"\n          height=\"320px\"\n        ></canvas>\n        <video\n          id=\"video\"\n          className=\"video\"\n          ref={ vidRef }\n          width=\"480\"\n          height=\"320\"\n          autoPlay\n          playsInline\n        ></video>\n      </div>\n      <h3>Result:</h3>\n      <video\n        id=\"video-result\"\n        className=\"video-result\"\n        ref={ resultRef }\n        width=\"480\"\n        height=\"320\"\n        autoPlay\n        playsInline\n      ></video>\n      <img ref={ imageRef } src={ background } alt=\"bg\" />\n      <div className=\"btn-group\">\n        <button className=\"btn\"onClick={ () => onLoadMediapipe('blur') }>Blur</button>\n        <button className=\"btn\"onClick={ () => onLoadMediapipe('virtual') }>Image</button>\n        <button className=\"btn\"onClick={ () => onLoadMediapipe(null)  }>Clear</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}